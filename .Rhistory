molten_df$posOptimalEx<-molten_df$posOptimal
molten_df$posOptimalEx<-ifelse(molten_df$posOptimal=="Above optimal",
ifelse(molten_df$value+molten_df$leader.Choice>78 & molten_df$value+molten_df$leader.Choice<80,
"Limit above optimal",ifelse(molten_df$value+molten_df$leader.Choice>80,
"Extreme above optimal",molten_df$posOptimalEx)),
molten_df$posOptimalEx)
molten_df$posOptimalEx<-factor(molten_df$posOptimalEx,levels=c("Extreme above optimal","Limit above optimal","Above optimal","Optimal","Below optimal"))
molten_df$posOptimal<-factor(molten_df$posOptimal,levels=c("Above optimal","Optimal","Below optimal"))
molten_df$RPE<-ifelse(molten_df$APorRP=="valueRP",1,0)
molten_df$Behind<-ifelse(molten_df$ahead=="behind",1,0)
TableDemographics<-df%>%
select(Gender,Country,"Level of Education",Student,AGE,EmploymentStatus,TimeTaken,Bonus) %>%
tbl_summary()
TableDemographicsBySlope<-df%>%
select(Gender,Country,"Level of Education",Student,AGE,EmploymentStatus,UPorDOWN,TimeTaken,Bonus) %>%
tbl_summary(by="UPorDOWN")%>%
add_overall()
TableDemographicsBySlope
#Entrire table
#TableDemographics<-as_kable_extra(TableDemographics, format = "latex")
TableDemographicsBySlope<-as_kable_extra(TableDemographicsBySlope, format = "latex")
pd <- position_dodge(0.2) # move them .05 to the left and right
summaryTableEntireSample<-summarySE(molten_df,measurevar = "value", groupvars = c("APorRP", "leader.Choice"))
summaryTableOrder<-summarySE(subset(molten_df,molten_df$Order==1),measurevar = "value", groupvars = c("APorRP", "leader.Choice"))
summaryTableOnlyDown<-summarySE(subset(molten_df,molten_df$UPorDOWN=="down"),measurevar = "value", groupvars = c("APorRP", "leader.Choice"))
summaryTableOnlyUp<-summarySE(subset(molten_df,molten_df$UPorDOWN=="up"),measurevar = "value", groupvars = c("APorRP", "leader.Choice"))
summaryTableOnlyRandom<-summarySE(subset(molten_df,molten_df$UPorDOWN=="random"),measurevar = "value", groupvars = c("APorRP", "leader.Choice"))
wideTable1<-summaryTableEntireSample %>%
select("APorRP","leader.Choice","value","se")%>% #selecting the variable from the summary table
gather("value","se",key = variable, value = number) %>%
spread(leader.Choice,number)%>% #This creates a table from summarySE
mutate_if(is.numeric, round,digits=2) #rounding to 3 digits
#cfTEST<-coeftest(linearModelSE,vcov. = vcovHC(linearModelSE,type="HC2",cluster="playerNr")) #requires lmtest
#cfTEST<-tidy(cfTEST)
TableMeanObservations<-as.data.frame(wideTable1) #may not be ideal, but a way to get the column names from widetable
TableMeanObservations[1,]<-c("valueAP","Optimal choices",as.list(as.integer(optimalAP$valueAP)))#optimal choices from AP
TableMeanObservations[2,]<-wideTable1[2,] #mean observations AP contract
TableMeanObservations[3,]<-c(NA,"se",addBrackets(unname(wideTable1[1,][3:11]))) #SE AP contract
TableMeanObservations[4,]<-c("valueRP","Optimal choices",as.list(as.integer(optimalRP$valueRP)))#optimal choices from RP
TableMeanObservations[5,]<-wideTable1[4,] #mean observations RP contract
TableMeanObservations[6,]<-c(NA,"se",addBrackets(unname(wideTable1[3,][3:11]))) #SE RP contract
#tables for a graph.
graphTable<-summaryTableEntireSample
#Sorry for this code.
graphTable[19:36,]<-NA
graphTable$APorRP<-factor(c(rep("Observed AP",9),rep("Observed RP",9),rep("Optimal AP",9),rep("Optimal RP",9)), levels = c("Observed AP", "Observed RP", "Optimal AP","Optimal RP"))
graphTable[19:36,2]<-graphTable[1:18,2] #add leader choices for the optimal
graphTable[19:36,4]<-c(optimalAP$valueAP,optimalRP$valueRP)
graphTableDS<-summaryTableOnlyDown
#Sorry for this code.
graphTableDS[19:36,]<-NA
graphTableDS$APorRP<-factor(c(rep("Observed AP",9),rep("Observed RP",9),rep("Optimal AP",9),rep("Optimal RP",9)), levels = c("Observed AP", "Observed RP", "Optimal AP","Optimal RP"))
graphTableDS[19:36,2]<-graphTableDS[1:18,2] #add leader choices for the optimal
graphTableDS[19:36,4]<-c(optimalAP$valueAP,optimalRP$valueRP)
graphTableUS<-summaryTableOnlyUp
#Sorry for this code.
graphTableUS[19:36,]<-NA
graphTableUS$APorRP<-factor(c(rep("Observed AP",9),rep("Observed RP",9),rep("Optimal AP",9),rep("Optimal RP",9)), levels = c("Observed AP", "Observed RP", "Optimal AP","Optimal RP"))
graphTableUS[19:36,2]<-graphTableUS[1:18,2] #add leader choices for the optimal
graphTableUS[19:36,4]<-c(optimalAP$valueAP,optimalRP$valueRP)
graphTableRandom<-summaryTableOnlyRandom
#Sorry for this code.
graphTableRandom[19:36,]<-NA
graphTableRandom$APorRP<-factor(c(rep("Observed AP",9),rep("Observed RP",9),rep("Optimal AP",9),rep("Optimal RP",9)), levels = c("Observed AP", "Observed RP", "Optimal AP","Optimal RP"))
graphTableRandom[19:36,2]<-graphTableRandom[1:18,2] #add leader choices for the optimal
graphTableRandom[19:36,4]<-c(optimalAP$valueAP,optimalRP$valueRP)
graphTableOF<-summaryTableOrder
#Sorry for this code.
graphTableOF[19:36,]<-NA
graphTableOF$APorRP<-factor(c(rep("Observed AP",9),rep("Observed RP",9),rep("Optimal AP",9),rep("Optimal RP",9)), levels = c("Observed AP", "Observed RP", "Optimal AP","Optimal RP"))
graphTableOF[19:36,2]<-graphTableOF[1:18,2] #add leader choices for the optimal
graphTableOF[19:36,4]<-c(optimalAP$valueAP,optimalRP$valueRP)
averageGraphFull<-graphTable%>%
ggplot(aes(x=leader.Choice,y=value,colour=APorRP,linetype=APorRP,size=APorRP))+
geom_path()+
geom_point()+
geom_errorbar(aes(ymin=value-ci, ymax=value+ci),size=0.4,width=2, position=pd)+
labs(y="Follower's Response", x="Leader's choice")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))+
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),limits=c(10,40))+
scale_color_manual(values = c("red", "dodgerblue3", "red", "dodgerblue3")) +
scale_linetype_manual(values = c(1, 1, 2, 2)) +
scale_size_manual(values = c(1, 1,0.4,0.4))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid),
legend.justification=c(0.01,0.01),
legend.position=c(0.01,0.01))
averageGraphFull
#ggsave("observedMeanGraph.png")
molten_df %>%
filter(APorRP %in% c("valueAP","valueRP")) %>%
ggplot(aes(x=as.factor(leader.Choice),y=value,fill=factor(APorRP)))+
geom_boxplot(outlier.size = 0.3)+
labs(y="Follower's Response", x="Leader's choice")+
theme(legend.title = element_blank())+
scale_fill_discrete(labels=c("AP responses","RP responses"))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 14),
legend.text = element_text(color = "black", size = 12),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid))
##ggsave("observedDistributions.png")
#Average graph with clean comparison (i.e. comparing the responses only with exposure to either APE or RPE)
averageGraphOF<-graphTableOF %>%
ggplot(aes(x=leader.Choice,y=value,colour=APorRP,linetype=APorRP,size=APorRP))+
geom_path()+
geom_point()+
geom_errorbar(aes(ymin=value-ci, ymax=value+ci),size=0.4,width=2, position=pd)+
labs(y="Follower's Response", x="Leader's choice")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 10))+
scale_y_continuous(breaks = scales::pretty_breaks(n = 10),limits=c(10,40))+
scale_color_manual(values = c("red", "dodgerblue3", "red", "dodgerblue3")) +
scale_linetype_manual(values = c(1, 1, 2, 2)) +
scale_size_manual(values = c(1, 1,0.4,0.4))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid),
legend.justification=c(0.01,0.01),
legend.position=c(0.01,0.01))
averageGraphOF
##ggsave("averageGraphOF.png")
##ggsave("averageGraphFull.png",averageGraphFull, scale=1,width=8, height=4,dpi=300)
legendTextSize=12
axisTextSize=12
plotTitleSize=10
averageGraphDown<-graphTableDS%>%
ggplot(aes(x=leader.Choice,y=value,colour=APorRP,linetype=APorRP,size=APorRP))+
geom_path()+
geom_point()+
ggtitle("Downward Sloping")+
geom_errorbar(aes(ymin=value-ci, ymax=value+ci),size=0.4,width=2, position=pd)+
labs(y="Follower's Response", x="Leader's choice")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 7))+
scale_y_continuous(breaks = scales::pretty_breaks(n = 7),limits=c(0,60))+
scale_color_manual(values = c("red", "dodgerblue3", "red", "dodgerblue3")) +
scale_linetype_manual(values = c(1, 1, 2, 2)) +
scale_size_manual(values = c(1, 1,0.4,0.4))+
theme(axis.title.x = element_text(color = "black", size = axisTextSize),
axis.title.y = element_text(color = "black", size = axisTextSize),
axis.text = element_text(color = "black", size = axisTextSize),
plot.title = element_text(size = plotTitleSize,hjust=0.5),
legend.text = element_text(color = "black", size = legendTextSize),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid))
averageGraphUp<-graphTableUS%>%
ggplot(aes(x=leader.Choice,y=value,colour=APorRP,linetype=APorRP,size=APorRP))+
geom_path()+
geom_point()+
ggtitle("Upward Sloping")+
geom_errorbar(aes(ymin=value-ci, ymax=value+ci),size=0.4,width=2, position=pd)+
labs(y="Follower's Response", x="Leader's choice")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 7))+
scale_y_continuous(breaks = scales::pretty_breaks(n = 7),limits=c(0,60))+
scale_color_manual(values = c("red", "dodgerblue3", "red", "dodgerblue3")) +
scale_linetype_manual(values = c(1, 1, 2, 2)) +
scale_size_manual(values = c(1, 1,0.4,0.4))+
theme(axis.title.x = element_text(color = "black", size = axisTextSize),
axis.title.y = element_blank(),
axis.text = element_text(color = "black", size = axisTextSize),
plot.title = element_text(size = plotTitleSize,hjust=0.5),
legend.text = element_text(color = "black", size = legendTextSize),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid))
averageGraphRandom<-graphTableRandom%>%
ggplot(aes(x=leader.Choice,y=value,colour=APorRP,linetype=APorRP,size=APorRP))+
geom_path()+
geom_point()+
ggtitle("Random Slopes")+
geom_errorbar(aes(ymin=value-ci, ymax=value+ci),size=0.4,width=2, position=pd)+
labs(y="Follower's Response", x="Leader's choice")+
scale_x_continuous(breaks = scales::pretty_breaks(n = 7))+
scale_y_continuous(breaks = scales::pretty_breaks(n = 7),limits=c(0,60))+
scale_color_manual(values = c("red", "dodgerblue3", "red", "dodgerblue3")) +
scale_linetype_manual(values = c(1, 1, 2, 2)) +
scale_size_manual(values = c(1, 1,0.4,0.4))+
theme(axis.title.x = element_text(color = "black", size = axisTextSize),
axis.title.y = element_blank(),
axis.text = element_text(color = "black", size = axisTextSize),
plot.title = element_text(size = plotTitleSize,hjust=0.5),
legend.text = element_text(color = "black", size = axisTextSize),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid))
averageGraphDown
averageGraphUp
averageGraphRandom
meanGraphsBySlope<-ggarrange(averageGraphDown,averageGraphUp, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
meanGraphsBySlope
ggsave("meanGraphsBySlope.png",meanGraphsBySlope, scale=1,width=12, height=6,dpi=300)
#ggsave("meanGraphsUP.png",averageGraphUp, scale=1,width=12, height=6,dpi=300)
#ggsave("meanGraphsDown.png",averageGraphDown, scale=1,width=12, height=6,dpi=300)
#ggsave("meanGraphsRandom.png",averageGraphRandom, scale=1,width=12, height=6,dpi=300)
stackedHistogramAP<-molten_df %>%
filter(APorRP=="valueAP")%>%
ggplot(aes(x=as.factor(leader.Choice),fill=posOptimal))+
geom_bar()+
ggtitle("AP contract")+
labs(y="Number of observations", x="Leader's choice")+
scale_fill_manual(values = c("#FF6666", "#00cc00", "#3399ff"))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12,hjust=0.5),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
stackedHistogramRP<-molten_df %>%
filter(APorRP=="valueRP")%>%
ggplot(aes(x=as.factor(leader.Choice),fill=posOptimal))+
geom_bar()+
ggtitle("RP contract")+
labs(y="Number of observations", x="Leader's choice")+
scale_fill_manual(values = c("#FF6666", "#00cc00", "#3399ff"))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12,hjust=0.5),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
stackedHistogramAPex<-molten_df%>%
filter(APorRP=="valueAP")%>%
ggplot(aes(x=as.factor(leader.Choice),fill=posOptimalEx))+
geom_bar()+
ggtitle("AP contract")+
labs(y="Number of observations", x="Leader's choice")+
scale_fill_manual(values = c("#990000","#FF0000","#FF6666", "#00cc00", "#3399ff"))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12,hjust=0.5),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
stackedHistogramRPex<-molten_df%>%
filter(APorRP=="valueRP")%>%
ggplot(aes(x=as.factor(leader.Choice),fill=posOptimalEx))+
geom_bar()+
ggtitle("RP contract")+
labs(y="Number of observations", x="Leader's choice")+
scale_fill_manual(values = c("#990000","#FF0000","#FF6666", "#00cc00", "#3399ff"))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12,hjust=0.5),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
arrangedHist<-ggarrange(stackedHistogramAP, stackedHistogramRP, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
arrangedHist
#ggsave("stackedHistogram.png",arrangedHist)
arrangedHistOnlyex<-ggarrange(stackedHistogramAPex, stackedHistogramRPex, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
arrangedHistOnlyex
#ggsave("arrangedHistex.png",arrangedHistOnlyex)
#Simple regression:
LinearRegressionPooledData<-lm(value~leader.Choice+RPE+leader.Choice:RPE,data=molten_df)
LinearRegressionCEPooledDataCE<-sqrt(diag(vcovCR(LinearRegressionPooledData,cluster=molten_df$playerNr,type="CR2")))
LinearRegressionPooledData2<-lm(value~leader.Choice+leader.Choice:RPE,data=molten_df)
LinearRegressionCEPooledDataCE2<-sqrt(diag(vcovCR(LinearRegressionPooledData2,cluster=molten_df$playerNr,type="CR2")))
vcov_matrices_1<-list(vcovCR(LinearRegressionPooledData,cluster=molten_df$playerNr,type="CR2"),vcovCR(LinearRegressionPooledData2,cluster=molten_df$playerNr,type="CR2"))
table1<-modelsummary(list("Model 1"=LinearRegressionPooledData,"Model 2"=LinearRegressionPooledData2),
metrics="all",
vcov=vcov_matrices_1,
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("(Intercept)"="Intercept","leader.Choice"="Qa(Leader Choice)","RPE"="RPE","leader.Choice:RPE"="RPE:Qa (Leader Choice)"),
gof_omit="AIC|BIC|ICC|F|RMSE|aicc|Log.Lik.|R2 Adj",
output="kableExtra",
title= "Linear response functions of second-movers.")
table1
#Regressions with "order effect" on the pooled data
LinearRegressionPooledDataRO<-lm(value~leader.Choice+RPE+leader.Choice:RPE+Order,data=molten_df)
LinearRegressionCEPooledDataCERO<-sqrt(diag(vcovCR(LinearRegressionPooledDataRO,type="CR2",cluster=molten_df$playerNr)))
LinearRegressionPooledData2RO<-lm(value~leader.Choice+leader.Choice:RPE+Order,data=molten_df)
LinearRegressionCEPooledDataCE2RO<-sqrt(diag(vcovCR(LinearRegressionPooledData2RO,type="CR2",cluster=molten_df$playerNr)))
vcov_list_withOrder<-list(vcovCR(LinearRegressionPooledDataRO,type="CR2",cluster=molten_df$playerNr),vcovCR(LinearRegressionPooledData2RO,type="CR2",cluster=molten_df$playerNr))
tableOrderEffects<-modelsummary(list("Model 1"=LinearRegressionPooledDataRO,"Model 2"=LinearRegressionPooledData2RO),
metrics="all",
vcov=vcov_list_withOrder,
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("(Intercept)"="Intercept","leader.Choice"="Qa(Leader Choice)","RPE"="RPE","leader.Choice:RPE"="RPE:Qa (Leader Choice)", "Order"="Order"),
gof_omit="AIC|BIC|ICC|F|RMSE|aicc|Log.Lik.|R2 Adj",
output="kableExtra",
title= "Linear response functions of second-movers (Controlling for order effects).")
tableOrderEffects
#Linear Probability models with cluster - robust standard errors
lpm1<-lm(punish~APorRP,data=molten_df)
lpm1CRSE<-sqrt(diag(vcovCR(lpm1,type="CR2",cluster=molten_df$playerNr)))
lpm2<-lm(punish~APorRP+ahead,data=molten_df)
lpm2CRSE<-sqrt(diag(vcovCR(lpm2,type="CR2",cluster=molten_df$playerNr)))
lpm3<-lm(punish~APorRP+ahead+ahead:APorRP,data=molten_df)
lpm3CRSE<-sqrt(diag(vcovCR(lpm3,type="CR2",cluster=molten_df$playerNr)))
#stargazer(lpm1,lpm2,lpm3,type="text",
#          se=list(lpm1CRSE,lpm2CRSE,lpm3CRSE),
#          no.space = TRUE)
vcov_matrices<-list(NULL,vcovCR(lpm1,type="CR2",cluster=molten_df$playerNr),NULL,vcovCR(lpm2,type="CR2",cluster=molten_df$playerNr),NULL,vcovCR(lpm3,type="CR2",cluster=molten_df$playerNr))
#Random Effects logit regressions
RELogit1<-glmer(punish~APorRP+(1|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogit2<-glmer(punish~APorRP+ahead+(1|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogit3<-glmer(punish~APorRP+ahead+ahead:APorRP+(1|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
#Extract logLike for each of the RE logit models
table2<-modelsummary(list("RE Logit 1"=RELogit1,"LPM 1"=lpm1,"RE Logit 2"=RELogit2,"LPM 2"=lpm2,"RE Logit 3"=RELogit3,"LPM 3"=lpm3),
metrics="all",
vcov=vcov_matrices,
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("APorRPvalueRP"="RPE","aheadbehind"="Behind","APorRPvalueRPaheadbehind"="RPE:Behind","APorRPvalueRP:aheadbehind"="RPE:Behind", '(Intercept)'    = 'Intercept'),
exponentiate = c(FALSE, FALSE,FALSE,FALSE, FALSE,FALSE),
gof_omit="R2|ICC|F|RMSE|aicc|LogLike",
output="kableExtra",
title= "Logistic regressions and Linear Probability models")
table2
#to have the output in latex change output to "latex"
relogitRO1<-glmer(punish~APorRP+ahead+Order+(1|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
lpmRO1<-lm(punish~APorRP+ahead+Order,data=molten_df)
lpmRO1CRSE<-sqrt(diag(vcovCR(lpmRO1,type="CR2",cluster=molten_df$playerNr)))
relogitRO2<-glmer(punish~APorRP+ahead+ahead:APorRP+Order+(1|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
lpmRO2<-lm(punish~APorRP+ahead+ahead:APorRP+Order,data=molten_df)
lpmRO2CRSE<-sqrt(diag(vcovCR(lpmRO2,type="CR2",cluster=molten_df$playerNr)))
vcov_matrices2<-list(NULL,vcovCR(lpmRO1,type="CR2",cluster=molten_df$playerNr),NULL,vcovCR(lpmRO2,type="CR2",cluster=molten_df$playerNr))
table5<-modelsummary(list("RE logit 1"=relogitRO1,"LPM 1"=lpmRO1,"RE logit 2"=relogitRO2,"LPM 2"=lpmRO2),
metrics="all",
vcov=vcov_matrices2,
stars=c('*' = .05, '**' = .01,'***'=.001),
title="Controlling for order effects",
coef_map = c("APorRPvalueRP"="RPE",
"aheadbehind"="Behind",
"APorRPvalueRPaheadbehind"="RPE:Behind",
"APorRPvalueRP:aheadbehind"="RPE:Behind",
"Order"="Order",
'(Intercept)'    = 'Intercept'),
gof_omit="R2|F|RMSE|aicc|ICC|Log",
output="kableExtra")
table5
#Regressions on first-exposure subsample:
LinearRegressionOnlyFirstEx<-lm(value~leader.Choice+RPE+leader.Choice:RPE,data=subset(molten_df,molten_df$Order==1))
LinearRegressionOnlyFirstExCE<-sqrt(diag(vcovCR(LinearRegressionOnlyFirstEx,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr)))
LinearRegressionOnlyFirstEx2<-lm(value~leader.Choice+leader.Choice:RPE,data=subset(molten_df,molten_df$Order==1))
LinearRegressionOnlyFirstExCE2<-sqrt(diag(vcovCR(LinearRegressionOnlyFirstEx2,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr)))
vcov_matrices_3<-list(vcovCR(LinearRegressionOnlyFirstEx,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr),
vcovCR(LinearRegressionOnlyFirstEx2,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr))
table_between_Subject_OLS<-modelsummary(list("Model 1"=LinearRegressionOnlyFirstEx,"Model 2"=LinearRegressionOnlyFirstEx2),
metrics="all",
vcov=vcov_matrices_3,
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("(Intercept)"="Intercept",
"leader.Choice"="Qa(Leader Choice)",
"RPE"="RPE",
"leader.Choice:RPE"="RPE:Qa (Leader Choice)"),
gof_omit="AIC|BIC|ICC|F|RMSE|aicc|Log.Lik.|R2 Adj",
output="kableExtra",
title= "Linear response functions of second-movers.(Between-subject comparison)")
table_between_Subject_OLS
#Linear Probability models with cluster - robust standard errors
lpm1_BS<-lm(punish~APorRP,data=subset(molten_df,molten_df$Order==1))
vcvov_1bs<-vcovCR(lpm1_BS,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr)
lpm2_BS<-lm(punish~APorRP+ahead,data=subset(molten_df,molten_df$Order==1))
vcvov_2bs<-vcovCR(lpm2_BS,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr)
lpm3_BS<-lm(punish~APorRP+ahead+ahead:APorRP,data=subset(molten_df,molten_df$Order==1))
vcvov_3bs<-vcovCR(lpm3_BS,type="CR2",cluster=subset(molten_df,molten_df$Order==1)$playerNr)
vcov_matrices_bs<-list(NULL,vcvov_1bs,NULL,vcvov_2bs,NULL,vcvov_3bs)
#Random Effects logit regressions
RELogitBS_1<-glmer(punish~APorRP+(1|playerNr),family=binomial(logit),
data=subset(molten_df,molten_df$Order==1),
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogitBS_2<-glmer(punish~APorRP+ahead+(1|playerNr),family=binomial(logit),
data=subset(molten_df,molten_df$Order==1),
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogitBS_3<-glmer(punish~APorRP+ahead+ahead:APorRP+(1|playerNr),family=binomial(logit),
data=subset(molten_df,molten_df$Order==1),
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
#Extract logLike for each of the RE logit models
table_BS<-modelsummary(list("RE Logit 1"=RELogitBS_1,"LPM 1"=lpm1_BS,"RE Logit 2"=RELogitBS_2,"LPM 2"=lpm2_BS,"RE Logit 3"=RELogitBS_3,"LPM 3"=lpm3_BS),
metrics="all",
vcov=vcov_matrices_bs,
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("APorRPvalueRP"="RPE","aheadbehind"="Behind","APorRPvalueRPaheadbehind"="RPE:Behind","APorRPvalueRP:aheadbehind"="RPE:Behind", '(Intercept)'    = 'Intercept'),
exponentiate = c(FALSE, FALSE,FALSE,FALSE, FALSE,FALSE),
gof_omit="R2|ICC|F|RMSE|aicc|LogLike",
output="kableExtra",
title= "Logistic regressions and Linear Probability models (Between-subject comparison)")
table_BS
#to have the output in latex change output to "latex"
#Including random slopes for the contract
RELogit4<-glmer(punish~APorRP+ahead+(1+APorRP|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogit5<-glmer(punish~APorRP+ahead+APorRP:ahead+(1+APorRP|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
#Including random slopes for the contract and aheadness
RELogit6<-glmer(punish~APorRP+ahead+(1+APorRP+ahead|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
RELogit7<-glmer(punish~APorRP+ahead+APorRP:ahead+(1+APorRP+ahead|playerNr),family=binomial(logit),
data=molten_df,
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
table4<-modelsummary(list("RE logit 2"=RELogit2,"RE logit 3"=RELogit3,"RE logit 4"=RELogit4,"RE logit 5"=RELogit5,"RE logit 6"=RELogit6,"RE logit 7"=RELogit7),
metrics="all",
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("APorRPvalueRP"="RPE","aheadbehind"="Behind","APorRPvalueRPaheadbehind"="RPE:Behind",'(Intercept)'    = 'Intercept'),
gof_omit="R2|F|RMSE|aicc|ICC|Log",
output="kableExtra",
title= "Additional model specifications: including random slopes on Contract and Behindness levels")
#Focusing on the downward-sloping group only
ReLogitDS1<-glmer(punish~APorRP+ahead+(1|playerNr),family=binomial(logit),
data=molten_df,
subset=molten_df$UPorDOWN=="down",
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
ReLogitDS2<-glmer(punish~APorRP+ahead+APorRP:ahead+(1|playerNr),family=binomial(logit),
data=molten_df,
subset=molten_df$UPorDOWN=="down",
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
LPMDS1<-lmer(punish~APorRP+ahead+(1|playerNr),data=molten_df,subset=molten_df$UPorDOWN=="down")
LPMDS2<-lmer(punish~APorRP+ahead+APorRP:ahead+(1|playerNr),data=molten_df,subset=molten_df$UPorDOWN=="down")
tableDS<-modelsummary(list("RE logit DS1"=ReLogitDS1,"RE logit DS2"=ReLogitDS2,"LPM DS1"=LPMDS1,"LPM DS2"=LPMDS2),
metrics="all",
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("APorRPvalueRP"="RPE","aheadbehind"="Behind","APorRPvalueRPaheadbehind"="RPE:Behind",'(Intercept)'    = 'Intercept'),
gof_omit="R2|F|RMSE|aicc|ICC|Log",
output="kableExtra")
tableDS
#Focusing on the upward-sloping group only
ReLogitUS1<-glmer(punish~APorRP+ahead+(1|playerNr),family=binomial(logit),
data=molten_df,
subset=molten_df$UPorDOWN=="up",
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
ReLogitUS2<-glmer(punish~APorRP+ahead+APorRP:ahead+(1|playerNr),family=binomial(logit),
data=molten_df,
subset=molten_df$UPorDOWN=="up",
control=glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun=2e5)))
LPMUS1<-lmer(punish~APorRP+ahead+(1|playerNr),data=molten_df,subset=molten_df$UPorDOWN=="up")
LPMUS2<-lmer(punish~APorRP+ahead+APorRP:ahead+(1|playerNr),data=molten_df,subset=molten_df$UPorDOWN=="up")
tableUS<-modelsummary(list("RE logit US1"=ReLogitUS1,"RE logit US2"=ReLogitUS2,"LPM US1"=LPMUS1,"LPM US2"=LPMUS2),
metrics="all",
stars=c('*' = .05, '**' = .01,'***'=.001),
coef_map = c("APorRPvalueRP"="RPE","aheadbehind"="Behind","APorRPvalueRPaheadbehind"="RPE:Behind",'(Intercept)'    = 'Intercept'),
gof_omit="R2|F|RMSE|aicc|ICC|Log",
output="kableExtra")
tableUS
leaderData<-melt(df[c(1,21:22)],measure.vars =2:3,value.name = "value",variable.name = "LeaderChoice")
leaderData$LeaderChoice<-ifelse(leaderData$LeaderChoice=="leaderChoiceAP", "Leader Choice AP","Leader Choice RP")
leaderData %>%
ggplot(aes(x=as.factor(value),fill=LeaderChoice))+
geom_bar(position = "dodge")+
labs(y="Frequency", x="Leader Choice")+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12,hjust=0.5),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
AllFunctionsAP<-molten_df %>%
filter(APorRP=="valueAP") %>%
ggplot(aes(colour=UPorDOWN))+
geom_line(aes(x=leader.Choice,y=value,group=playerNr))+
geom_path(data=optimalAP,group=1,size=1.5,aes(x=leader.Choice,y=valueAP,colour="Optimal strategy"))+
ggtitle("Observed response functions: AP contract")+
scale_x_continuous(name="Leader's choice",breaks = scales::pretty_breaks(n = 10))+
scale_y_continuous(name="Follower's Response",limits=c(0,79))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
AllFunctionsRP<-molten_df %>%
filter(APorRP=="valueRP") %>%
ggplot(aes(colour=UPorDOWN))+
geom_line(aes(x=leader.Choice,y=value,group=playerNr))+
ggtitle("Observed response functions: RP contract")+
geom_path(data=optimalRP,group=1,size=1.5,aes(x=leader.Choice,y=valueRP,colour="Optimal strategy"))+
labs(y="Follower's Response", x="Leader's choice")+
theme(legend.title = element_blank())+
scale_x_continuous(name="Leader's choice",breaks = scales::pretty_breaks(n = 10))+
scale_y_continuous(name="Follower's Response",limits=c(0,79))+
theme(axis.title.x = element_text(color = "black", size = 12),
axis.title.y = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 10),
plot.title = element_text(size = 12),
legend.text = element_text(color = "black", size = 10),
legend.title =  element_blank(),
panel.grid =  element_line(color = col_grid)
)
allFunctions<-ggarrange(AllFunctionsAP,AllFunctionsRP, ncol=2, nrow=1, common.legend = TRUE, legend="bottom")
allFunctions
